[{"C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\index.tsx":"1","C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\App.tsx":"2","C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\Styles.tsx":"3","C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\EditForm\\EditForm.tsx":"4","C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\EditForm\\Styles.tsx":"5","C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\AddModal\\AddModal.tsx":"6","C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\AddModal\\Styles.tsx":"7","C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\Types.ts":"8","C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\Table\\Table.tsx":"9","C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\Table\\SortTable.tsx":"10","C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\Table\\Row.tsx":"11"},{"size":464,"mtime":1660899153402,"results":"12","hashOfConfig":"13"},{"size":2211,"mtime":1660898662942,"results":"14","hashOfConfig":"13"},{"size":2945,"mtime":1660895594381,"results":"15","hashOfConfig":"13"},{"size":3395,"mtime":1660813622095,"results":"16","hashOfConfig":"13"},{"size":1626,"mtime":1660813646754,"results":"17","hashOfConfig":"13"},{"size":4593,"mtime":1660744713523,"results":"18","hashOfConfig":"13"},{"size":2944,"mtime":1660743641119,"results":"19","hashOfConfig":"13"},{"size":579,"mtime":1660906310966,"results":"20","hashOfConfig":"13"},{"size":4956,"mtime":1660907474641,"results":"21","hashOfConfig":"13"},{"size":995,"mtime":1660906868256,"results":"22","hashOfConfig":"13"},{"size":2574,"mtime":1660898283979,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bvwy1",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\index.tsx",[],[],"C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\App.tsx",["61","62"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nimport { TopBar, Container, AddButton, Background } from \"./Components/Styles\";\nimport { Employee, EmployeeRow } from \"./Components/Types\";\nimport AddModal from \"./Components/AddModal/AddModal\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Table from \"./Components/Table/Table\";\n\nfunction App() {\n  const [employees, setEmployees] = useState<EmployeeRow[]>([]);\n  const [add, toggleAdd] = useState<boolean>(false);\n\n  const getEmployees = async () => {\n    const result = await axios.get(\"http://localhost:8080/employees/\");\n    return result.data;\n  };\n\n  const { isLoading, error, data, refetch } = useQuery(\n    [\"employees\"],\n    getEmployees\n  );\n\n  const addEmployee = async (data: Employee) => {\n    let response;\n    try {\n      response = await axios.post(\"http://localhost:8080/employees\", data);\n      toggleAdd(false);\n      refetch();\n    } catch {\n      console.log(response);\n    }\n  };\n\n  const updateEmployee = async (id: number, data: Employee) => {\n    let response;\n    try {\n      response = await axios.put(\"http://localhost:8080/employees/\" + id, data);\n      refetch();\n      console.log(response);\n    } catch {\n      console.log(response);\n    }\n  };\n\n  const deleteEmployee = async (id: number) => {\n    const response = await axios.delete(\n      \"http://localhost:8080/employees/\" + id\n    );\n    if (response.status === 200) {\n      refetch();\n    }\n  };\n\n  const closeModal = () => {\n    toggleAdd(false);\n  };\n\n  useEffect(() => {\n    setEmployees(data);\n  }, [data]);\n\n  return (\n    <div className=\"App\">\n      <AddModal closeModal={closeModal} addEmployee={addEmployee} add={add} />\n      <Background>\n        <TopBar>Employee Manager</TopBar>\n        <Container>\n          <AddButton onClick={() => toggleAdd(true)}>Add Employee</AddButton>\n          {employees && (\n            <Table\n              employees={employees}\n              setEmployees={setEmployees}\n              updateEmployee={updateEmployee}\n              deleteEmployee={deleteEmployee}\n            />\n          )}\n        </Container>\n      </Background>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\Styles.tsx",[],[],"C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\EditForm\\EditForm.tsx",[],["63","64","65","66"],"C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\EditForm\\Styles.tsx",[],[],"C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\AddModal\\AddModal.tsx",["67"],["68","69","70","71"],"import { useForm } from \"react-hook-form\";\r\nimport { Employee } from \"../Types\";\r\nimport {\r\n  ButtonContainer,\r\n  ErrorMessage,\r\n  FadedBackround,\r\n  FormContainer,\r\n  Header,\r\n  Input,\r\n  InputContainer,\r\n  Label,\r\n  MailInput,\r\n  Name,\r\n  Window,\r\n  SubmitButton,\r\n  CancelButton,\r\n} from \"./Styles\";\r\n\r\nconst AddModal = (props: {\r\n  closeModal: () => void;\r\n  addEmployee: (employee: Employee) => Promise<void>;\r\n  add: boolean;\r\n}) => {\r\n  // const [employee, setEmployee] = useState<Employee>(defaultValue);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    mode: \"onSubmit\",\r\n    defaultValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      role: \"\",\r\n      age: 0,\r\n    },\r\n  });\r\n\r\n  const isValidEmail = (email: string) =>\r\n    // eslint-disable-next-line no-useless-escape\r\n    /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n      email\r\n    );\r\n\r\n  const handleEmailValidation = (email: string) => {\r\n    console.log(\"ValidateEmail was called with\", email);\r\n\r\n    const isValid = isValidEmail(email);\r\n\r\n    const validityChanged =\r\n      (errors.email && isValid) || (!errors.email && !isValid);\r\n    if (validityChanged) {\r\n      console.log(\"Fire tracker with\", isValid ? \"Valid\" : \"Invalid\");\r\n    }\r\n\r\n    return isValid;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Window\r\n        initial={{ x: \"calc(50vw - 50%)\", y: \"calc(-10vh)\", opacity: 0 }}\r\n        animate={{\r\n          opacity: props.add ? 1 : 0,\r\n          scale: props.add ? 1 : 0,\r\n          x: \"calc(50vw - 50%)\",\r\n          y: \"calc(-10vh)\",\r\n        }}\r\n      >\r\n        <Header>New Employee</Header>\r\n        <FormContainer\r\n          onSubmit={handleSubmit((data) => {\r\n            props.addEmployee(data);\r\n            props.closeModal();\r\n          })}\r\n        >\r\n          <Name>\r\n            <InputContainer>\r\n              <Input\r\n                id=\"firstName\"\r\n                {...register(\"firstName\", { required: \"This is required\" })}\r\n                placeholder=\"First Name\"\r\n                style={{\r\n                  border: errors.firstName\r\n                    ? \"2px solid red\"\r\n                    : \"2px solid #00000045\",\r\n                }}\r\n              />\r\n            </InputContainer>\r\n            <InputContainer>\r\n              <Input\r\n                id=\"lastName\"\r\n                {...register(\"lastName\", { required: \"This is required\" })}\r\n                placeholder=\"Last Name\"\r\n                style={{\r\n                  border: errors.lastName\r\n                    ? \"2px solid red\"\r\n                    : \"2px solid #00000045\",\r\n                }}\r\n              />\r\n            </InputContainer>\r\n          </Name>\r\n          <Name>\r\n            <InputContainer>\r\n              <Input\r\n                {...register(\"role\", { required: \"Role is required\" })}\r\n                placeholder=\"Role\"\r\n                style={{\r\n                  border: errors.role ? \"2px solid red\" : \"2px solid #00000045\",\r\n                }}\r\n              />\r\n            </InputContainer>\r\n            <Label>Age:</Label>\r\n            <InputContainer style={{ width: \"100px\" }}>\r\n              <Input\r\n                type=\"number\"\r\n                min=\"0\"\r\n                {...register(\"age\", {\r\n                  required: \"This is required\",\r\n                  valueAsNumber: true,\r\n                })}\r\n                style={{\r\n                  border: errors.age ? \"2px solid red\" : \"2px solid #00000045\",\r\n                }}\r\n              />\r\n            </InputContainer>\r\n          </Name>\r\n          <InputContainer>\r\n            <MailInput\r\n              id=\"email\"\r\n              {...register(\"email\", {\r\n                required: \"This is required\",\r\n                validate: handleEmailValidation,\r\n              })}\r\n              placeholder=\"Email\"\r\n              style={{\r\n                border: errors.email ? \"2px solid red\" : \"2px solid #00000045\",\r\n              }}\r\n            />\r\n          </InputContainer>\r\n          <ButtonContainer>\r\n            <SubmitButton type=\"submit\" value=\"Confirm\" />\r\n            <CancelButton onClick={props.closeModal}>Cancel</CancelButton>\r\n          </ButtonContainer>\r\n        </FormContainer>\r\n      </Window>\r\n      {props.add && (\r\n        <FadedBackround\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 0.5 }}\r\n          transition={{ duration: 0.3 }}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddModal;\r\n",[],"C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\AddModal\\Styles.tsx",[],[],"C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\Types.ts",[],[],"C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\Table\\Table.tsx",["72"],[],"import { AnimatePresence } from \"framer-motion\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  Cell,\r\n  TopRow,\r\n  StyledTable,\r\n  StyledH3,\r\n  EmailCell,\r\n  SmallCell,\r\n} from \"../Styles\";\r\nimport { Employee, EmployeeRow, Property } from \"../Types\";\r\nimport { sortEmployees } from \"./SortTable\";\r\nimport { ReactComponent as Arrow } from \"../../images/arrow.svg\";\r\nimport Row from \"./Row\";\r\n\r\nconst Table = (props: {\r\n  employees: EmployeeRow[];\r\n  setEmployees: (value: EmployeeRow[]) => void;\r\n  updateEmployee: (id: number, data: Employee) => Promise<void>;\r\n  deleteEmployee: (id: number) => Promise<void>;\r\n}) => {\r\n  const [sorting, setSorting] = useState<{\r\n    direction: \"asc\" | \"desc\";\r\n    column: Property;\r\n  }>({ direction: \"asc\", column: Property.firstName });\r\n\r\n  const sort = <T extends {}>(\r\n    arr: { id: number; value: T }[],\r\n    column: Property\r\n  ) => {\r\n    let sortBy: \"asc\" | \"desc\";\r\n    if (column === sorting.column) {\r\n      sortBy = sorting.direction === \"asc\" ? \"desc\" : \"asc\";\r\n    } else {\r\n      sortBy = \"asc\";\r\n    }\r\n\r\n    setSorting({ direction: sortBy, column });\r\n    const sortedBy = sortEmployees({\r\n      sortBy,\r\n      param: arr,\r\n      setEmployees: props.setEmployees,\r\n    });\r\n\r\n    const sorted = [...props.employees].sort(\r\n      (a, b) => sortedBy?.indexOf(a.id) - sortedBy?.indexOf(b.id)\r\n    );\r\n    props.setEmployees(sorted);\r\n  };\r\n\r\n  return (\r\n    <StyledTable>\r\n      <TopRow>\r\n        <Cell\r\n          onClick={() => {\r\n            sort(\r\n              props.employees.map((e) => ({ id: e.id, value: e.firstName })),\r\n              Property.firstName\r\n            );\r\n          }}\r\n          style={{ userSelect: \"none\" }}\r\n        >\r\n          <StyledH3>First Name</StyledH3>\r\n          {sorting.column === Property.firstName && (\r\n            <Arrow\r\n              style={\r\n                sorting.direction === \"asc\"\r\n                  ? { transform: \"rotate(0deg)\" }\r\n                  : { transform: \"rotate(180deg)\" }\r\n              }\r\n            />\r\n          )}\r\n        </Cell>\r\n        <Cell\r\n          onClick={() => {\r\n            sort(\r\n              props.employees.map((e) => ({ id: e.id, value: e.lastName })),\r\n              Property.lastName\r\n            );\r\n          }}\r\n          style={{ userSelect: \"none\" }}\r\n        >\r\n          <StyledH3>Last Name</StyledH3>\r\n          {sorting.column === Property.lastName && (\r\n            <Arrow\r\n              style={\r\n                sorting.direction === \"asc\"\r\n                  ? { transform: \"rotate(0deg)\" }\r\n                  : { transform: \"rotate(180deg)\" }\r\n              }\r\n            />\r\n          )}\r\n        </Cell>\r\n        <EmailCell\r\n          onClick={() => {\r\n            sort(\r\n              props.employees.map((e) => ({ id: e.id, value: e.email })),\r\n              Property.email\r\n            );\r\n          }}\r\n          style={{ userSelect: \"none\" }}\r\n        >\r\n          <StyledH3>Email</StyledH3>\r\n          {sorting.column === Property.email && (\r\n            <Arrow\r\n              style={\r\n                sorting.direction === \"asc\"\r\n                  ? { transform: \"rotate(0deg)\" }\r\n                  : { transform: \"rotate(180deg)\" }\r\n              }\r\n            />\r\n          )}\r\n        </EmailCell>\r\n        <Cell\r\n          onClick={() => {\r\n            sort(\r\n              props.employees.map((e) => ({ id: e.id, value: e.role })),\r\n              Property.role\r\n            );\r\n          }}\r\n          style={{ userSelect: \"none\" }}\r\n        >\r\n          <StyledH3>Role</StyledH3>\r\n          {sorting.column === Property.role && (\r\n            <Arrow\r\n              style={\r\n                sorting.direction === \"asc\"\r\n                  ? { transform: \"rotate(0deg)\" }\r\n                  : { transform: \"rotate(180deg)\" }\r\n              }\r\n            />\r\n          )}\r\n        </Cell>\r\n        <SmallCell\r\n          onClick={() => {\r\n            sort(\r\n              props.employees.map((e) => ({ id: e.id, value: e.age })),\r\n              Property.age\r\n            );\r\n          }}\r\n          style={{ userSelect: \"none\" }}\r\n        >\r\n          <StyledH3>Age</StyledH3>\r\n          {sorting.column === Property.age && (\r\n            <Arrow\r\n              style={\r\n                sorting.direction === \"asc\"\r\n                  ? { transform: \"rotate(0deg)\" }\r\n                  : { transform: \"rotate(180deg)\" }\r\n              }\r\n            />\r\n          )}\r\n        </SmallCell>\r\n        <SmallCell style={{ userSelect: \"none\" }}></SmallCell>\r\n      </TopRow>\r\n      <AnimatePresence initial={false}>\r\n        {props.employees.map((employee) => (\r\n          <Row\r\n            key={employee.id}\r\n            id={employee.id}\r\n            deleteEmployee={props.deleteEmployee}\r\n            employee={employee}\r\n            updateEmployee={props.updateEmployee}\r\n          />\r\n        ))}\r\n      </AnimatePresence>\r\n    </StyledTable>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\Table\\SortTable.tsx",[],[],"C:\\Users\\Blast\\Spring Boot Projects\\EmployeeManager Project\\employee-frontend\\src\\Components\\Table\\Row.tsx",[],[],{"ruleId":"73","severity":1,"message":"74","line":20,"column":11,"nodeType":"75","messageId":"76","endLine":20,"endColumn":20},{"ruleId":"73","severity":1,"message":"77","line":20,"column":22,"nodeType":"75","messageId":"76","endLine":20,"endColumn":27},{"ruleId":"78","severity":1,"message":"79","line":37,"column":27,"nodeType":"80","messageId":"81","endLine":37,"endColumn":28,"suggestions":"82","suppressions":"83"},{"ruleId":"78","severity":1,"message":"79","line":37,"column":52,"nodeType":"80","messageId":"81","endLine":37,"endColumn":53,"suggestions":"84","suppressions":"85"},{"ruleId":"78","severity":1,"message":"79","line":37,"column":61,"nodeType":"80","messageId":"81","endLine":37,"endColumn":62,"suggestions":"86","suppressions":"87"},{"ruleId":"78","severity":1,"message":"79","line":37,"column":65,"nodeType":"80","messageId":"81","endLine":37,"endColumn":66,"suggestions":"88","suppressions":"89"},{"ruleId":"73","severity":1,"message":"90","line":5,"column":3,"nodeType":"75","messageId":"76","endLine":5,"endColumn":15},{"ruleId":"78","severity":1,"message":"79","line":42,"column":27,"nodeType":"80","messageId":"81","endLine":42,"endColumn":28,"suggestions":"91","suppressions":"92"},{"ruleId":"78","severity":1,"message":"79","line":42,"column":52,"nodeType":"80","messageId":"81","endLine":42,"endColumn":53,"suggestions":"93","suppressions":"94"},{"ruleId":"78","severity":1,"message":"79","line":42,"column":61,"nodeType":"80","messageId":"81","endLine":42,"endColumn":62,"suggestions":"95","suppressions":"96"},{"ruleId":"78","severity":1,"message":"79","line":42,"column":65,"nodeType":"80","messageId":"81","endLine":42,"endColumn":66,"suggestions":"97","suppressions":"98"},{"ruleId":"73","severity":1,"message":"99","line":2,"column":10,"nodeType":"75","messageId":"76","endLine":2,"endColumn":19},"@typescript-eslint/no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["100","101"],["102"],["103","104"],["105"],["106","107"],["108"],["109","110"],["111"],"'ErrorMessage' is defined but never used.",["112","113"],["114"],["115","116"],["117"],["118","119"],["120"],["121","122"],["123"],"'useEffect' is defined but never used.",{"messageId":"124","fix":"125","desc":"126"},{"messageId":"127","fix":"128","desc":"129"},{"kind":"130","justification":"131"},{"messageId":"124","fix":"132","desc":"126"},{"messageId":"127","fix":"133","desc":"129"},{"kind":"130","justification":"131"},{"messageId":"124","fix":"134","desc":"126"},{"messageId":"127","fix":"135","desc":"129"},{"kind":"130","justification":"131"},{"messageId":"124","fix":"136","desc":"126"},{"messageId":"127","fix":"137","desc":"129"},{"kind":"130","justification":"131"},{"messageId":"124","fix":"138","desc":"126"},{"messageId":"127","fix":"139","desc":"129"},{"kind":"130","justification":"131"},{"messageId":"124","fix":"140","desc":"126"},{"messageId":"127","fix":"141","desc":"129"},{"kind":"130","justification":"131"},{"messageId":"124","fix":"142","desc":"126"},{"messageId":"127","fix":"143","desc":"129"},{"kind":"130","justification":"131"},{"messageId":"124","fix":"144","desc":"126"},{"messageId":"127","fix":"145","desc":"129"},{"kind":"130","justification":"131"},"removeEscape",{"range":"146","text":"131"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"147","text":"148"},"Replace the `\\` with `\\\\` to include the actual backslash character.","directive","",{"range":"149","text":"131"},{"range":"150","text":"148"},{"range":"151","text":"131"},{"range":"152","text":"148"},{"range":"153","text":"131"},{"range":"154","text":"148"},{"range":"155","text":"131"},{"range":"156","text":"148"},{"range":"157","text":"131"},{"range":"158","text":"148"},{"range":"159","text":"131"},{"range":"160","text":"148"},{"range":"161","text":"131"},{"range":"162","text":"148"},[909,910],[909,909],"\\",[934,935],[934,934],[943,944],[943,943],[947,948],[947,947],[879,880],[879,879],[904,905],[904,904],[913,914],[913,913],[917,918],[917,917]]